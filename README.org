#+STARTUP: content

* German Woerterbuch for Emacs                                   :Noexport_2:

[[https://www.gnu.org/licenses/gpl-3.0][https://img.shields.io/badge/License-GPL%20v3-blue.svg]] [[https://github.com/hubisan/woerterbuch/actions/workflows/tests.yml][https://github.com/hubisan/woerterbuch/actions/workflows/tests.yml/badge.svg]]

Retrieve definitions (meanings) and synonyms for German words with Emacs.

** TODO Add image

** Main features                                                :noexport_0:

    - Retrieve definitions (meanings) or synonyms for a word and
      - display in an Org-mode buffer,
      - insert into the current Org-mode buffer, or
      - add to the kill ring as Org-mode syntax.
    - Retrieve definitions and synonyms simultaneously.
    - Select a synonym for a word and
      - insert it into the current buffer,
      - replace the word at point with it, or
      - add it to the kill ring.

The word used for retrieval can be read from the minibuffer or taken from point.

Definitions are retrieved from [[https://www.dwds.de/]] and synonyms from [[https://www.openthesaurus.de/]].

If anyone knows a better way to get definitions than parsing Dwds, please open an issue. [[https://github.com/hdaSprachtechnologie/odenet][Open German WordNet]] looks promising but needs some python scripts to return

-----

** TODOS

To make use of python in Emacs Lisp start-process is needed:

Use pipx to install packages. This doesn't seem to work for non-commands. And those packages here are non-commands.

#+BEGIN_SRC emacs-lisp
  (defvar my-filter-output nil
    "Capture the output of the process.")

  (defun my-filter (process output)
    "This function is called from the process."

    )

  (let* (
         (process-connection-type nil)  ; use a pipe
         (coding-system-for-write 'utf-8-auto)
         (coding-system-for-read 'utf-8-auto)
         (process-buffer-name "*testme*")
         (process-buffer (get-buffer-create process-buffer-name))
         (process (start-process "python-script" process-buffer "python3")))
    ;; Don't show any output unless it is needed.
    (set-process-filter process t)
    (process-send-string process "import wn")
    (set-process-filter process #'my-filter)
    ;; `accept-process-output' can be used to wait for the process output.
    ;; Else it doesn't wait and the filter function will be called later on.
    (unless (accept-process-output (process-send-string process "") 3)
      (error "Timeout reached before output was received"))

    )
#+END_SRC

#+RESULTS:


*** TODO Lemmatizer

This seems to be much simpler and correctly makes groß if using gross. But it is wrong with Busse > Bus. But this is actually hard to know if using swiss dialect as we write Busse for Bus and Busse for Busse. Probably best to only use the lemmatizer if it is not already a baseform. And this is only needed if using word at point, else it can be expected that the users enters the baseform.

https://github.com/adbar/simplemma

Simplemma is much faster and in this case even better:

#+BEGIN_SRC python :results pp
  from simplemma.simplemma import lemmatize
  lemma = lemmatize("draussen", lang='de')
  return lemma
#+END_SRC

#+RESULTS:
: 'draußen'

#+BEGIN_SRC python :results pp
  import spacy
  nlp = spacy.load('de_dep_news_trf')
  doc = nlp('draussen')
  return doc[0].lemma_
#+END_SRC

#+RESULTS:
: 'Draussen'

=de_core_news_sm= gave me some false lemmas, like 'Spitäler' instead of 'Spital'.

*** TODO Switch to Open German WordNet

This seems to be a good alternative, but also needs some python coding. If words returns more than one the word can be for instance a Adjektiv and a Verb. In that case the user needs to decide what he wants.

Definitions:

#+BEGIN_SRC python :results pp
  import wn

  def get_all_synset_definitions(word):
      de = wn.Wordnet('odenet')
      word = de.words(word)[0]
      synsets = word.synsets()
      definitions = []
      for synset in synsets:
          definitions.append(synset.definition())
      return definitions

  return get_all_synset_definitions('Feld')
#+END_SRC

#+RESULTS:
: ['ein bestimmtes Umfeld oder eine bestimmte Lebensweise',
:  'ein Gebiet, in dem eine Schlacht ausgetragen wird (oder wurde)',
:  'ein Ort, an dem Flugzeuge starten und landen',
:  'ein Wissensgebiet, für das man sich interessiert oder über das man '
:  'kommuniziert',
:  'ein Gebiet, in dem aktive militärische Operationen durchgeführt werden']

Synonyms can be retrieved as follows:

#+BEGIN_SRC python :results raw
  # de.synsets('einfach')[1].senses()[0].word().lemma()
  import json
  import wn

  def get_synonyms(word):
      de = wn.Wordnet('odenet')
      # If this array is bigger than 1 then show an UI
      # in which one can decide what to do. Could also
      # retrieve all words?
      # word.pos does give n for noun and a for adjective/adverb
      # and v for Verb.
      word = de.words(word)[0]
      synsets = word.synsets()
      synonyms = []
      for synset in synsets:
          lemmas = synset.lemmas()
          # lemmas = sorted(lemmas, key=str.casefold)
          # Remove the word itself.
          word_lemma = word.lemma()
          if word_lemma in lemmas:
              lemmas.remove(word_lemma)
          synonyms.append([synset.definition(), lemmas])
      return json.dumps(synonyms)

  return get_synonyms("Wohnung")

#+END_SRC

** Contents

- [[#installation][Installation]]
- [[#usage][Usage]]
- [[#customization][Customization]]
- [[#key-bindings][Key Bindings]]
- [[#changelog][Changelog]]
- [[#contributing][Contributing]]

** Installation
:PROPERTIES:
:CUSTOM_ID: installation
:END:

# Describe how to install this package.

This package is hosted on Github. Use your favourite way to install like [[https://github.com/radian-software/straight.el][Straight]] or [[https://github.com/quelpa/quelpa][Quelpa]]. Starting with Emacs 29 ~package-vc-install~ may be used.

** Usage
:PROPERTIES:
:CUSTOM_ID: usage
:END:

*** Show Definitions

*** Show Synonyms

If a word is not in its baseform, the synonyms for the baseform are looked up (the baseform for Fahrzeuge is Fahrzeug for instance).

- ~woerterbuch-synonyms-show-in-org-buffer~ \\
  Show the synonyms for a word in an Org buffer. Reads the word from the minibuffer.
- ~woerterbuch-synonyms-show-in-org-buffer-for-word-at-point~ \\
  Show the synonyms for a word at point in an Org buffer.
- ~woerterbuch-synonyms-insert-into-org-buffer~ \\
  Read a word from the minibuffer and insert the synonyms as a list into the current Org buffer. If called with a prefix arg (C-u), it adds a heading with the word as the title before the list.
- ~woerterbuch-synonyms-kill-as-org-mode-syntax~ \\
  Add the synonyms for word read from the minibuffer to the kill ring as Org syntax. If called with a prefix arg (C-u), it adds a heading with the word as title before the list.
- ~woerterbuch-synonyms-insert~ \\
  Lookup synonyms for word read from minibuffer and insert selected word at point. If called with a prefix arg (C-u) the selected word is added to the kill ring instead.
- ~woerterbuch-synonyms-lookup-word-at-point~ \\
  Lookup synonyms for word at point and add to kill ring. 
- ~woerterbuch-synonyms-replace-word-at-point~ \\
  Lookup synonyms for wort at point or selection and replace it. 
  
*** Show Definitions and Synonyms

*** Select a Synonym 

** Customization
:PROPERTIES:
:CUSTOM_ID: customization
:END:

*** Variables

Set the following variables to change the behaviour of the package:

- ~woerterbuch-org-buffer-display-function~  #'pop-to-buffer \\
  Function used to the display the org buffer with the definitions or synonyms. The function takes buffer as argument.
- ~woerterbuch-list-bullet-point~  "-" \\
  String to use as list bullet point when converting synonyms or definitions to a list.
- ~woerterbuch-insert-org-heading-format~  "%s %s\n\n%s" \\
  Format used when inserting an Org heading before content.

*** Faces

The package defines no faces.

** Key Bindings
:PROPERTIES:
:CUSTOM_ID: key-bindings
:END:

- @@html:<kbd>@@C-c C-q@@html:</kbd>@@ is bound to ~quit-window~ in the Org buffer showing the definitions or synonyms.

*** Hydra

# Example of a hydra definition.
# TODO show code to define a hydra.

** Changelog
:PROPERTIES:
:CUSTOM_ID: changelog
:END:

See the [[./CHANGELOG.org][changelog]].

** Contributing
:PROPERTIES:
:CUSTOM_ID: contributing
:END:

Use the issue tracker to reports bugs, suggest improvements or propose new features. If you want to contribute please open a pull request after having opened a new issue.

In any case please check out the [[./CONTRIBUTING.org::*Contributing][contributing guidelines]] beforehand.
